<!doctype html>
<html
  class="no-js{% if request.design_mode %} shopify-design-mode{% endif %}"
  lang="{{ request.locale.iso_code }}"
>
  <head>
 {%- render 'ecom_header' -%}
    {%- render 'stylesheets' -%}

    {%- if settings.favicon != blank -%}
      <link
        rel="icon"
        type="image/png"
        href="{{ settings.favicon | image_url: width: 32, height: 32 }}"
      >
    {%- endif -%}

    {% comment %} This a way to wait for main content to load when navigating to a new page so that the view transitions can work consistently {% endcomment %}
    <link
      rel="expect"
      href="#MainContent"
      blocking="render"
      id="view-transition-render-blocker"
    >

    {%- render 'meta-tags' -%}
    {%- render 'fonts' -%}
    {%- render 'scripts' -%}
    {%- render 'theme-styles-variables' -%}
    {%- render 'color-schemes' -%}

    <script src="{{ 'gsap.min.js' | asset_url }}" defer></script>
    <script src="{{ 'ScrollTrigger.min.js' | asset_url }}" defer></script>

    {% if request.design_mode %}
      {%- render 'theme-editor' -%}
    {% endif %}

    {{ content_for_header }}
  </head>

  <body class="page-width-{{ settings.page_width }} card-hover-effect-{{ settings.card_hover_effect }}">
    {% render 'skip-to-content-link', href: '#MainContent', text: 'accessibility.skip_to_text' %}
    <div id="header-group">
      {% sections 'header-group' %}
    </div>

    <main
      id="MainContent"
      class="content-for-layout"
      role="main"
      data-page-transition-enabled="{{ settings.page_transition_enabled }}"
      data-product-transition="{{ settings.transition_to_main_product }}"
      data-template="{{ template }}"
    >
      
      {{ content_for_layout }}
      
    </main>

    {% sections 'footer-group' %}

    {% render 'search-modal' %}

    {% # theme-check-disable ParserBlockingScript %}
    <script src="{{ 'critical.js' | asset_url }}"></script>
    {% # theme-check-enable ParserBlockingScript %}

    {% if settings.quick_add or settings.mobile_quick_add %}
      {% render 'quick-add-modal' %}
    {% endif %}
   
  {%- render "ecom_footer"-%}
<script>
  // Hàm kiểm tra và chờ GSAP load xong
  function waitForGSAP(callback, attempts = 0) {
    const maxAttempts = 50; // Tối đa 5 giây
    
    if (typeof gsap !== 'undefined' && typeof ScrollTrigger !== 'undefined') {
      callback();
    } else if (attempts < maxAttempts) {
      setTimeout(() => {
        waitForGSAP(callback, attempts + 1);
      }, 100);
    } else {
      console.error('GSAP/ScrollTrigger failed to load after 5 seconds');
    }
  }

  // Khởi tạo animation khi GSAP sẵn sàng
  function initHeroAnimation() {
    try {
      // Đăng ký ScrollTrigger plugin
      gsap.registerPlugin(ScrollTrigger);

      // Kiểm tra hero section có tồn tại không
      const heroSection = document.querySelector('.hero-section');
      if (!heroSection) {
        console.warn('Hero section not found');
        return;
      }

      // Tạo timeline với ScrollTrigger
      const tl = gsap.timeline({
        scrollTrigger: {
          trigger: '.hero-section',
          start: 'top top',
          end: '+=200%',
          scrub: 2.5,
          pin: true,
          anticipatePin: 1,
          onUpdate: self => {
            console.log('Scroll progress:', self.progress);
          },
          onRefresh: () => {
            console.log('ScrollTrigger refreshed');
          }
        }
      });

      // Lấy các elements để animate
      const tigerImage = heroSection.querySelector('img[alt="tiger"]');
      const skullImage = heroSection.querySelector('img[alt="skull-mask"]');
      const soldierImage = heroSection.querySelector('img[alt="solider"]');
      const hybridLogo = heroSection.querySelector('img[alt*="HYBRID"]');
      const leftButton = heroSection.querySelector('img[alt="left_button"]');
      const rightButton = heroSection.querySelector('img[alt="right_button"]');
      
      // Tạo animation sequence
      tl
        // Fade in hero section
        .from(heroSection, {
          opacity: 0,
          duration: 0.5
        })
        
        // Animate tiger image - slide in from left
        .from(tigerImage, {
          x: -200,
          opacity: 0,
          duration: 1,
          ease: "power2.out"
        }, 0.2)
        
        // Animate skull mask - slide in from right
        .from(skullImage, {
          x: 200,
          opacity: 0,
          rotation: 15,
          duration: 1,
          ease: "power2.out"
        }, 0.4)
        
        // Animate soldier image - slide in from right
        .from(soldierImage, {
          x: 150,
          opacity: 0,
          duration: 1,
          ease: "power2.out"
        }, 0.6)
        
        // Animate HYBRID logo - scale up
        .from(hybridLogo, {
          scale: 0,
          opacity: 0,
          duration: 0.8,
          ease: "back.out(1.7)"
        }, 0.8)
        
        // Animate buttons - fade in and slight movement
        .from([leftButton, rightButton], {
          opacity: 0,
          y: 50,
          duration: 0.6,
          stagger: 0.1,
          ease: "power2.out"
        }, 1)
        
        // Parallax effect during scroll
        .to(tigerImage, {
          y: -100,
          x: -50,
          duration: 2,
          ease: "none"
        }, 1.5)
        
        .to(skullImage, {
          y: -80,
          x: 30,
          rotation: -5,
          duration: 2,
          ease: "none"
        }, 1.5)
        
        .to(soldierImage, {
          y: -120,
          x: 50,
          duration: 2,
          ease: "none"
        }, 1.5)
        
        .to(hybridLogo, {
          y: -60,
          scale: 1.1,
          duration: 2,
          ease: "none"
        }, 1.5)
        
        // Final fade out effect
        .to(heroSection, {
          opacity: 0.3,
          duration: 1,
          ease: "power2.inOut"
        }, 3);

      // Refresh ScrollTrigger
      ScrollTrigger.refresh();
      
      console.log('Hero animation initialized successfully');
      
    } catch (error) {
      console.error('Error initializing hero animation:', error);
    }
  }

  // Chờ DOM và GSAP load xong
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      waitForGSAP(initHeroAnimation);
    });
  } else {
    waitForGSAP(initHeroAnimation);
  }

  // Refresh ScrollTrigger khi resize window
  window.addEventListener('resize', () => {
    if (typeof ScrollTrigger !== 'undefined') {
      ScrollTrigger.refresh();
    }
  });

  // Debug: Log khi scripts load
  window.addEventListener('load', () => {
    console.log('Page fully loaded');
    console.log('GSAP available:', typeof gsap !== 'undefined');
    console.log('ScrollTrigger available:', typeof ScrollTrigger !== 'undefined');
  });
</script>
  </body>
</html>
